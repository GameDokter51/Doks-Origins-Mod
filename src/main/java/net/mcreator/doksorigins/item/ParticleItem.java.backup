package net.mcreator.doksorigins.item;

import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.math.Axis;
import mod.maxbogomol.fluffy_fur.FluffyFur;
import mod.maxbogomol.fluffy_fur.client.event.ClientTickHandler;
import mod.maxbogomol.fluffy_fur.client.particle.behavior.SphereParticleBehavior;
import mod.maxbogomol.fluffy_fur.client.particle.data.LightParticleData;
import mod.maxbogomol.fluffy_fur.client.particle.data.SpinParticleData;
import mod.maxbogomol.fluffy_fur.client.render.RenderBuilder;
import mod.maxbogomol.fluffy_fur.common.item.IGuiParticleItem;
import mod.maxbogomol.fluffy_fur.common.item.IParticleItem;
import mod.maxbogomol.fluffy_fur.registry.client.FluffyFurRenderTypes;
import mod.maxbogomol.fluffy_fur.util.RenderUtil;
import net.mcreator.doksorigins.DoksOriginsMod;
import net.mcreator.doksorigins.registry.DoksOriginsParticles;
import net.minecraft.client.Minecraft;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResultHolder;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.item.ItemEntity;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import mod.maxbogomol.fluffy_fur.client.particle.ParticleBuilder;
import mod.maxbogomol.fluffy_fur.client.particle.data.ColorParticleData;
import mod.maxbogomol.fluffy_fur.client.particle.data.GenericParticleData;
import mod.maxbogomol.fluffy_fur.common.easing.Easing;
import mod.maxbogomol.fluffy_fur.registry.client.FluffyFurParticles;
import net.minecraft.world.phys.Vec3;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;

import java.awt.*;
import java.util.Random;
public class ParticleItem extends Item implements IGuiParticleItem {
    public ParticleItem(Properties properties){
        super(properties);
    }

    @Override
    @OnlyIn(Dist.CLIENT)
    public void renderParticle(PoseStack poseStack, LivingEntity entity, Level level, ItemStack stack, int x, int y, int seed, int guiOffset) {

        float ticks = (ClientTickHandler.ticksInGame + Minecraft.getInstance().getPartialTick());
        for (int i = 0; i < 45; i++) {
            double angle = Math.toRadians(i * (360.0 / 45));  // Convert degree to radians, dividing the circle into 20 segments
            double distance = 0.3;  // Set a fixed distance from the center (radius of the circle)
            double xOffset = Math.cos(angle) * distance;
            double zOffset = Math.sin(angle) * distance;
            poseStack.pushPose();
            poseStack.translate(x + 8 + xOffset, y + 8, 100);
            RenderBuilder.create().setRenderType(FluffyFurRenderTypes.ADDITIVE_TEXTURE)
                    .setUV(RenderUtil.getSprite(FluffyFur.MOD_ID, "particle/star"))
                    .setAlpha(0.5f)
                    .setColorRaw(0,1,1)
                    .renderCenteredQuad(poseStack, 2f)
                    .endBatch();
            poseStack.popPose();
        }
    }
    @Override
    public InteractionResultHolder<ItemStack> use(Level level, Player player, InteractionHand hand) {
        ItemStack stack = player.getItemInHand(hand);
        CompoundTag nbt = stack.getOrCreateTag();

        if (level.isClientSide()) {
            Vec3 pos = player.getEyePosition().add(player.getLookAngle().scale(10f));

                ParticleBuilder.create(DoksOriginsParticles.CHAINS)
                        .setRenderType(FluffyFurRenderTypes.ADDITIVE_PARTICLE_TEXTURE)
                        .setBehavior(SphereParticleBehavior.create().setSphereSize(64, 32).build())
                        .setColorData(ColorParticleData.create(0, 1, 1, 0, 0.5f, 1).build())
                        .setTransparencyData(GenericParticleData.create(0.1f, 0.9f, 0f).setEasing(Easing.QUARTIC_OUT).build())
                        .setScaleData(GenericParticleData.create(1f, 100f).setEasing(Easing.EXPO_IN).build())
                        .setLifetime(60)
                        .repeat(level, pos.x(), pos.y()+0.1f, pos.z(), 1);
        }
        return InteractionResultHolder.success(stack);
    }
}
